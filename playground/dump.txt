└── research
    └── syuron
        └── examples
            ├── domaingen.ipynb
            ├── flatness.ipynb
            ├── npda.ipynb
            ├── periodic_combination.ipynb
            ├── shg.ipynb
            ├── train.ipynb
            └── wgmodes_demo.ipynb


/research/syuron/examples/flatness.ipynb:
--------------------------------------------------------------------------------
  1 | {
  2 |  "cells": [
  3 |   {
  4 |    "cell_type": "code",
  5 |    "execution_count": null,
  6 |    "id": "c0c218f1",
  7 |    "metadata": {},
  8 |    "outputs": [
  9 |     {
 10 |      "name": "stdout",
 11 |      "output_type": "stream",
 12 |      "text": [
 13 |       "--- Loaded Data (first 5 rows) ---\n",
 14 |       "   wavelength    efficiency\n",
 15 |       "0    0.931000  2.191901e-09\n",
 16 |       "1    0.931135  1.828837e-09\n",
 17 |       "2    0.931270  9.193326e-10\n",
 18 |       "3    0.931405  4.997221e-10\n",
 19 |       "4    0.931541  1.075342e-09\n",
 20 |       "\n",
 21 |       "--- Data Types ---\n",
 22 |       "wavelength    float64\n",
 23 |       "efficiency    float64\n",
 24 |       "dtype: object\n"
 25 |      ]
 26 |     },
 27 |     {
 28 |      "data": {
 30 |       "text/plain": [
 31 |        "<Figure size 1000x600 with 1 Axes>"
 32 |       ]
 33 |      },
 34 |      "metadata": {},
 35 |      "output_type": "display_data"
 36 |     }
 37 |    ],
 38 |    "source": [
 39 |     "import pandas as pd\n",
 40 |     "import matplotlib.pyplot as plt\n",
 41 |     "import numpy as np  # 必要に応じて数値計算用\n",
 42 |     "\n",
 43 |     "# --- CSVファイルの読み込み ---\n",
 44 |     "# CSVファイル名を指定（前のスクリプトで出力したファイル名）\n",
 45 |     "csv_filename = 'chirped_shg_efficiency.csv'\n",
 46 |     "\n",
 47 |     "# pandasを使ってCSVファイルを読み込む\n",
 48 |     "# header=0 は1行目をヘッダーとして認識させるため（デフォルト）\n",
 49 |     "# encoding='utf-8' は前のスクリプトで指定したエンコーディングに合わせる\n",
 50 |     "df_data = pd.read_csv(csv_filename, header=0, encoding='utf-8')\n",
 51 |     "\n",
 52 |     "# データの確認（最初の数行を表示）\n",
 53 |     "print(\"--- Loaded Data (first 5 rows) ---\")\n",
 54 |     "print(df_data.head())\n",
 55 |     "print(\"\\n--- Data Types ---\")\n",
 56 |     "print(df_data.dtypes)  # 各列のデータ型を確認\n",
 57 |     "\n",
 58 |     "# --- データの抽出 ---\n",
 59 |     "# CSVファイルの列名に合わせてデータを抽出\n",
 60 |     "wavelength_column_name = 'wavelength'\n",
 61 |     "efficiency_column_name = 'efficiency'\n",
 62 |     "\n",
 63 |     "if wavelength_column_name not in df_data.columns:\n",
 64 |     "    raise ValueError(\n",
 65 |     "        f\"Error: Column '{wavelength_column_name}' not found in {csv_filename}\")\n",
 66 |     "if efficiency_column_name not in df_data.columns:\n",
 67 |     "    raise ValueError(\n",
 68 |     "        f\"Error: Column '{efficiency_column_name}' not found in {csv_filename}\")\n",
 69 |     "\n",
 70 |     "wavelengths_loaded = df_data[wavelength_column_name].values\n",
 71 |     "efficiency_loaded = df_data[efficiency_column_name].values\n",
 72 |     "\n",
 73 |     "# --- Matplotlibでプロット ---\n",
 74 |     "plt.figure(figsize=(10, 6))  # グラフのサイズを設定\n",
 75 |     "\n",
 76 |     "# データをプロット\n",
 77 |     "plt.plot(wavelengths_loaded, efficiency_loaded,  # type: ignore\n",
 78 |     "         color='blue', label='SHG Efficiency from CSV')\n",
 79 |     "\n",
 80 |     "# グラフの装飾\n",
 81 |     "plt.xlabel(\"Wavelength (μm)\")  # X軸ラベル\n",
 82 |     "plt.ylabel(\"Efficiency (Power)\")       # Y軸ラベル\n",
 83 |     "plt.title(\"SHG Efficiency Distribution from CSV Data\")  # グラフタイトル\n",
 84 |     "plt.legend()      # 凡例を表示\n",
 85 |     "plt.grid(True)    # グリッドを表示\n",
 86 |     "\n",
 87 |     "# 必要に応じてY軸の範囲などを調整\n",
 88 |     "# plt.ylim(0, max(efficiency_loaded) * 1.1) # 例: Y軸の最小値を0、最大値をデータの最大値の1.1倍に\n",
 89 |     "\n",
 90 |     "# グラフを表示\n",
 91 |     "plt.show()"
 92 |    ]
 93 |   },
 94 |   {
 95 |    "cell_type": "code",
 96 |    "execution_count": null,
 97 |    "id": "4330b2d4",
 98 |    "metadata": {},
 99 |    "outputs": [],
100 |    "source": [
101 |     "# TODO: 5種類の周期分極反転構造をくっつけたもの、それぞれ1000ドメインずつで合計5000ドメイン、各構造でduty比と周期が異なり、合計10種類のパラメータ\n",
102 |     "# TODO: 5000ドメインだと0.5秒くらいで分布が計算できるので、オプティマイザでその計算を繰り返して、10個のパラメータを決定すればいけそう"
103 |    ]
104 |   }
105 |  ],
106 |  "metadata": {
107 |   "kernelspec": {
108 |    "display_name": ".venv",
109 |    "language": "python",
110 |    "name": "python3"
111 |   },
112 |   "language_info": {
113 |    "codemirror_mode": {
114 |     "name": "ipython",
115 |     "version": 3
116 |    },
117 |    "file_extension": ".py",
118 |    "mimetype": "text/x-python",
119 |    "name": "python",
120 |    "nbconvert_exporter": "python",
121 |    "pygments_lexer": "ipython3",
122 |    "version": "3.12.9"
123 |   }
124 |  },
125 |  "nbformat": 4,
126 |  "nbformat_minor": 5
127 | }
128 | 


--------------------------------------------------------------------------------
/research/syuron/examples/npda.ipynb:
--------------------------------------------------------------------------------
  1 | {
  2 |  "cells": [
  3 |   {
  4 |    "cell_type": "code",
  5 |    "execution_count": null,
  6 |    "id": "0633ddbf",
  7 |    "metadata": {},
  8 |    "outputs": [
  9 |     {
 10 |      "name": "stderr",
 11 |      "output_type": "stream",
 12 |      "text": [
 13 |       "2025-05-07 07:56:58.702436: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
 14 |       "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
 15 |       "E0000 00:00:1746604618.724119   65864 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
 16 |       "E0000 00:00:1746604618.730825   65864 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
 17 |       "W0000 00:00:1746604618.747138   65864 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
 18 |       "W0000 00:00:1746604618.747159   65864 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
 19 |       "W0000 00:00:1746604618.747161   65864 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
 20 |       "W0000 00:00:1746604618.747163   65864 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n"
 21 |      ]
 22 |     },
 23 |     {
 24 |      "name": "stdout",
 25 |      "output_type": "stream",
 26 |      "text": [
 27 |       "(100, 100)\n",
 28 |       "(100, 100)\n"
 29 |      ]
 30 |     }
 31 |    ],
 32 |    "source": [
 33 |     "import jax.numpy as jnp\n",
 34 |     "import jax.numpy as np\n",
 35 |     "import matplotlib.pyplot as plt\n",
 36 |     "from syuron import shg, mgoslt, pp\n",
 37 |     "\n",
 38 |     "# 定数\n",
 39 |     "kappa = 1.031E-05\n",
 40 |     "num_domains = 500\n",
 41 |     "\n",
 42 |     "\n",
 43 |     "def eff_numerical(width_dim, wavelength_dim):\n",
 44 |     "    fixed_grating = pp.fixed(num_domains, width_dim, kappa)\n",
 45 |     "    eff_tensor = mgoslt.analyze(shg.Params(\n",
 46 |     "        grating_dim=fixed_grating,\n",
 47 |     "        T_dim=70,\n",
 48 |     "        wavelength_dim=wavelength_dim,\n",
 49 |     "        fund_power_dim=1,\n",
 50 |     "        sh_power_dim=0,\n",
 51 |     "    ))\n",
 52 |     "    power_tensor = jnp.abs(eff_tensor[:, 0, :, 0, 0])**2\n",
 53 |     "    power_tensor = power_tensor / jnp.max(power_tensor) * 10  # 正規化していい感じの値にする\n",
 54 |     "    return power_tensor\n",
 55 |     "\n",
 56 |     "\n",
 57 |     "def NPDA(L: np.ndarray, phase_mismatch: np.ndarray) -> np.ndarray:\n",
 58 |     "    delta = phase_mismatch / 2\n",
 59 |     "    return (kappa**2 * L**2 * np.sin(delta * L)**2) / ((delta * L)**2)\n",
 60 |     "\n",
 61 |     "\n",
 62 |     "# 教科書2.62のNPDAは分極反転なしの式、周期分極反転構造の場合ちょっと工夫が必要\n",
 63 |     "def eff_analytical(width_dim, wavelength_dim):\n",
 64 |     "    width_dim = jnp.array(width_dim)\n",
 65 |     "    wavelength_dim = jnp.array(wavelength_dim)\n",
 66 |     "    width, wavelength = jnp.meshgrid(width_dim, wavelength_dim, indexing='ij')\n",
 67 |     "    phase_mismatch = mgoslt.use_material(\n",
 68 |     "        wavelength, 70)(1)  # type: ignore z=1の時2\\Delta \\cdot z = 2\\Delta\n",
 69 |     "    K = jnp.pi / width\n",
 70 |     "    phase_mismatch = phase_mismatch - K  # NPDAの方では delta に 補正が入る\n",
 71 |     "    result = NPDA(num_domains * width, phase_mismatch)\n",
 72 |     "    result = result / jnp.max(result) * 10  # 正規化していい感じの値にする\n",
 73 |     "    return result\n",
 74 |     "\n",
 75 |     "\n",
 76 |     "# 変数\n",
 77 |     "m_width_dim = np.linspace(3.5, 3.7, 100).tolist()\n",
 78 |     "m_wavelength_dim = jnp.linspace(1.025, 1.035, 100).tolist()\n",
 79 |     "\n",
 80 |     "\n",
 81 |     "power_tensor_numerical = eff_numerical(\n",
 82 |     "    m_width_dim, m_wavelength_dim)\n",
 83 |     "result = eff_analytical(\n",
 84 |     "    m_width_dim, m_wavelength_dim)\n",
 85 |     "print(power_tensor_numerical.shape)\n",
 86 |     "print(result.shape)"
 87 |    ]
 88 |   },
 89 |   {
 90 |    "cell_type": "code",
 91 |    "execution_count": 2,
 92 |    "id": "cfdf7431",
 93 |    "metadata": {},
 94 |    "outputs": [
 95 |     {
 96 |      "data": {
 98 |       "text/plain": [
 99 |        "<Figure size 640x480 with 1 Axes>"
100 |       ]
101 |      },
102 |      "metadata": {},
103 |      "output_type": "display_data"
104 |     }
105 |    ],
106 |    "source": [
107 |     "# 積分による計算結果とNPDAを用いた近似解法による計算結果を比較して、数値解法が正しいことを確認しておく\n",
108 |     "\n",
109 |     "plt.plot(m_wavelength_dim, power_tensor_numerical[50])\n",
110 |     "plt.plot(m_wavelength_dim, result[50], linestyle='--')\n",
111 |     "plt.grid(True)\n",
112 |     "plt.show()"
113 |    ]
114 |   },
115 |   {
116 |    "cell_type": "code",
117 |    "execution_count": null,
118 |    "id": "c4c73cfe",
119 |    "metadata": {},
120 |    "outputs": [
121 |     {
122 |      "name": "stdout",
123 |      "output_type": "stream",
124 |      "text": [
125 |       "(100, 100)\n",
126 |       "(100, 100)\n"
127 |      ]
128 |     },
129 |     {
130 |      "data": {
132 |       "text/plain": [
133 |        "<Figure size 640x480 with 1 Axes>"
134 |       ]
135 |      },
136 |      "metadata": {},
137 |      "output_type": "display_data"
138 |     }
139 |    ],
140 |    "source": [
141 |     "import jax.numpy as jnp\n",
142 |     "import jax.numpy as np\n",
143 |     "import matplotlib.pyplot as plt\n",
144 |     "from syuron import shg, mgoslt, pp\n",
145 |     "\n",
146 |     "# 定数\n",
147 |     "kappa = 1.031E-05\n",
148 |     "num_domains = 1\n",
149 |     "\n",
150 |     "\n",
151 |     "def eff_numerical(width_dim, wavelength_dim):\n",
152 |     "    fixed_grating = pp.fixed(num_domains, width_dim, kappa)\n",
153 |     "    eff_tensor = mgoslt.analyze(shg.Params(\n",
154 |     "        grating_dim=fixed_grating,\n",
155 |     "        T_dim=70,\n",
156 |     "        wavelength_dim=wavelength_dim,\n",
157 |     "        fund_power_dim=1,\n",
158 |     "        sh_power_dim=0,\n",
159 |     "    ))\n",
160 |     "    power_tensor = jnp.abs(eff_tensor[:, 0, :, 0, 0])**2\n",
161 |     "    power_tensor = power_tensor / jnp.max(power_tensor) * 10  # 正規化していい感じの値にする\n",
162 |     "    return power_tensor\n",
163 |     "\n",
164 |     "\n",
165 |     "def NPDA(L: np.ndarray, phase_mismatch: np.ndarray) -> np.ndarray:\n",
166 |     "    delta = phase_mismatch / 2\n",
167 |     "    return (kappa**2 * L**2 * np.sin(delta * L)**2) / ((delta * L)**2)\n",
168 |     "\n",
169 |     "\n",
170 |     "# 教科書2.62のNPDAは分極反転なしの式、周期分極反転構造の場合ちょっと工夫が必要\n",
171 |     "def eff_analytical(width_dim, wavelength_dim):\n",
172 |     "    width_dim = jnp.array(width_dim)\n",
173 |     "    wavelength_dim = jnp.array(wavelength_dim)\n",
174 |     "    width, wavelength = jnp.meshgrid(width_dim, wavelength_dim, indexing='ij')\n",
175 |     "    phase_mismatch = mgoslt.use_material(\n",
176 |     "        wavelength, 70)(1)  # type: ignore z=1の時2\\Delta \\cdot z = 2\\Delta\n",
177 |     "    result = NPDA(num_domains * width, phase_mismatch)\n",
178 |     "    result = result / jnp.max(result) * 10  # 正規化していい感じの値にする\n",
179 |     "    return result\n",
180 |     "\n",
181 |     "\n",
182 |     "# 変数\n",
183 |     "# 幅を大きくしてみて、積分とNPDAの結果が一致するか確認\n",
184 |     "m_width_dim = np.linspace(350, 370, 100).tolist()\n",
185 |     "m_wavelength_dim = jnp.linspace(1.025, 1.035, 100).tolist()\n",
186 |     "\n",
187 |     "\n",
188 |     "power_tensor_numerical = eff_numerical(\n",
189 |     "    m_width_dim, m_wavelength_dim)\n",
190 |     "result = eff_analytical(\n",
191 |     "    m_width_dim, m_wavelength_dim)\n",
192 |     "print(power_tensor_numerical.shape)\n",
193 |     "print(result.shape)\n",
194 |     "\n",
195 |     "# 積分による計算結果とNPDAを用いた近似解法による計算結果を比較して、数値解法が正しいことを確認しておく\n",
196 |     "\n",
197 |     "plt.plot(m_wavelength_dim, power_tensor_numerical[50])\n",
198 |     "plt.plot(m_wavelength_dim, result[50], linestyle='--')\n",
199 |     "plt.grid(True)\n",
200 |     "plt.show()"
201 |    ]
202 |   }
203 |  ],
204 |  "metadata": {
205 |   "kernelspec": {
206 |    "display_name": ".venv",
207 |    "language": "python",
208 |    "name": "python3"
209 |   },
210 |   "language_info": {
211 |    "codemirror_mode": {
212 |     "name": "ipython",
213 |     "version": 3
214 |    },
215 |    "file_extension": ".py",
216 |    "mimetype": "text/x-python",
217 |    "name": "python",
218 |    "nbconvert_exporter": "python",
219 |    "pygments_lexer": "ipython3",
220 |    "version": "3.12.9"
221 |   }
222 |  },
223 |  "nbformat": 4,
224 |  "nbformat_minor": 5
225 | }
226 | 


--------------------------------------------------------------------------------
/research/syuron/examples/wgmodes_demo.ipynb:
--------------------------------------------------------------------------------
  1 | {
  2 | 	"cells": [
  3 | 		{
  4 | 			"cell_type": "code",
  5 | 			"execution_count": 1,
  6 | 			"metadata": {},
  7 | 			"outputs": [
  8 | 				{
  9 | 					"data": {
 11 | 						"text/plain": [
 12 | 							"<Figure size 1000x800 with 8 Axes>"
 13 | 						]
 14 | 					},
 15 | 					"metadata": {},
 16 | 					"output_type": "display_data"
 17 | 				}
 18 | 			],
 19 | 			"source": [
 20 | 				"import numpy as np\n",
 21 | 				"import matplotlib.pyplot as plt\n",
 22 | 				"from syuron import waveguide\n",
 23 | 				"\n",
 24 | 				"# Wavelength\n",
 25 | 				"lambda_ = 0.92  # Wavelength is set to double the fundamental wavelength\n",
 26 | 				"\n",
 27 | 				"# Grid size\n",
 28 | 				"dx = 0.01\n",
 29 | 				"dy = 0.01\n",
 30 | 				"\n",
 31 | 				"# x and y ranges\n",
 32 | 				"x = np.arange(-2, 2 + dx, dx)\n",
 33 | 				"y = np.arange(-2, 2 + dy, dy)\n",
 34 | 				"\n",
 35 | 				"# Generate meshgrid\n",
 36 | 				"X, Y = np.meshgrid(x, y)\n",
 37 | 				"\n",
 38 | 				"# Initialize refractive index profile\n",
 39 | 				"index = np.ones_like(X) * 1.0  # Initialize to 1.0\n",
 40 | 				"\n",
 41 | 				"# Set index where Y < 0 to 1.5\n",
 42 | 				"index[Y < 0] = 1.5\n",
 43 | 				"\n",
 44 | 				"# Set index where Y >= 0, Y < 0.5, and abs(X) < 1 to 2.4\n",
 45 | 				"mask = (Y >= 0) & (Y < 0.5) & (np.abs(X) < 1)\n",
 46 | 				"index[mask] = 2.4\n",
 47 | 				"\n",
 48 | 				"# Compute epsilon_r (relative permittivity)\n",
 49 | 				"epsilon_r = index ** 2\n",
 50 | 				"\n",
 51 | 				"# Guess for effective index (maximum refractive index)\n",
 52 | 				"guess = np.max(index)\n",
 53 | 				"\n",
 54 | 				"# Number of modes to compute\n",
 55 | 				"nmodes = 5\n",
 56 | 				"\n",
 57 | 				"# Boundary conditions\n",
 58 | 				"boundary = '0000'  # This is fixed as per your code\n",
 59 | 				"\n",
 60 | 				"# Mode number to select (e.g., 1)\n",
 61 | 				"mode = 1\n",
 62 | 				"\n",
 63 | 				"# Compute modes using wgmodes\n",
 64 | 				"neff, Hx, Hy = waveguide.neff_Hxy(\n",
 65 | 				"    lambda_, guess, nmodes, dx, dy, epsilon_r, boundary)\n",
 66 | 				"\n",
 67 | 				"# Post-process to compute the electric fields\n",
 68 | 				"Hz, Ex, Ey, Ez = waveguide.Hz_Exyz(\n",
 69 | 				"    lambda_, neff[mode-1], Hx[:, :, mode-1], Hy[:, :, mode-1], dx, dy, epsilon_r, boundary)\n",
 70 | 				"\n",
 71 | 				"# Normalize fields\n",
 72 | 				"ex, ey, ez, hx, hy, hz = waveguide.normalize(\n",
 73 | 				"    dx, dy, Ex, Ey, Ez, Hx[:, :, mode-1], Hy[:, :, mode-1], Hz)\n",
 74 | 				"\n",
 75 | 				"# Create a single figure with 2x2 subplots\n",
 76 | 				"fig, axs = plt.subplots(2, 2, figsize=(10, 8))\n",
 77 | 				"\n",
 78 | 				"# Subplot 1: Refractive Index Profile\n",
 79 | 				"im1 = axs[0, 0].imshow(index, extent=[x.min(), x.max(),\n",
 80 | 				"                       y.min(), y.max()], origin='lower')\n",
 81 | 				"axs[0, 0].set_title('Refractive Index Profile')\n",
 82 | 				"axs[0, 0].set_xlabel('x')\n",
 83 | 				"axs[0, 0].set_ylabel('y')\n",
 84 | 				"plt.colorbar(im1, ax=axs[0, 0])\n",
 85 | 				"axs[0, 0].set_aspect('equal')\n",
 86 | 				"\n",
 87 | 				"# Subplot 2: Hx Field of the selected mode\n",
 88 | 				"im2 = axs[0, 1].imshow(np.abs(Hx[:, :, mode-1]),\n",
 89 | 				"                       extent=[x.min(), x.max(), y.min(), y.max()], origin='lower')\n",
 90 | 				"axs[0, 1].set_title(f'Hx Field of Mode {mode}')\n",
 91 | 				"axs[0, 1].set_xlabel('x')\n",
 92 | 				"axs[0, 1].set_ylabel('y')\n",
 93 | 				"plt.colorbar(im2, ax=axs[0, 1])\n",
 94 | 				"axs[0, 1].set_aspect('equal')\n",
 95 | 				"\n",
 96 | 				"# Subplot 3: Ex Field of the selected mode\n",
 97 | 				"im3 = axs[1, 0].imshow(np.abs(Ex), extent=[\n",
 98 | 				"                       x.min(), x.max(), y.min(), y.max()], origin='lower')\n",
 99 | 				"axs[1, 0].set_title(f'Ex Field of Mode {mode}')\n",
100 | 				"axs[1, 0].set_xlabel('x')\n",
101 | 				"axs[1, 0].set_ylabel('y')\n",
102 | 				"plt.colorbar(im3, ax=axs[1, 0])\n",
103 | 				"axs[1, 0].set_aspect('equal')\n",
104 | 				"\n",
105 | 				"# Subplot 4: Ey Field of the selected mode\n",
106 | 				"im4 = axs[1, 1].imshow(np.abs(Ey), extent=[\n",
107 | 				"                       x.min(), x.max(), y.min(), y.max()], origin='lower')\n",
108 | 				"axs[1, 1].set_title(f'Ey Field of Mode {mode}')\n",
109 | 				"axs[1, 1].set_xlabel('x')\n",
110 | 				"axs[1, 1].set_ylabel('y')\n",
111 | 				"plt.colorbar(im4, ax=axs[1, 1])\n",
112 | 				"axs[1, 1].set_aspect('equal')\n",
113 | 				"\n",
114 | 				"plt.tight_layout()\n",
115 | 				"plt.show()"
116 | 			]
117 | 		}
118 | 	],
119 | 	"metadata": {
120 | 		"kernelspec": {
121 | 			"display_name": ".venv",
122 | 			"language": "python",
123 | 			"name": "python3"
124 | 		},
125 | 		"language_info": {
126 | 			"codemirror_mode": {
127 | 				"name": "ipython",
128 | 				"version": 3
129 | 			},
130 | 			"file_extension": ".py",
131 | 			"mimetype": "text/x-python",
132 | 			"name": "python",
133 | 			"nbconvert_exporter": "python",
134 | 			"pygments_lexer": "ipython3",
135 | 			"version": "3.10.12"
136 | 		}
137 | 	},
138 | 	"nbformat": 4,
139 | 	"nbformat_minor": 4
140 | }
141 | 


--------------------------------------------------------------------------------