// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: pb/funsearch.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FUNSEARCH_Propose_FullMethodName = "/funsearch_worker.pb.FUNSEARCH/propose"
	FUNSEARCH_Observe_FullMethodName = "/funsearch_worker.pb.FUNSEARCH/observe"
)

// FUNSEARCHClient is the client API for FUNSEARCH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// funsearch-worker service definition.
type FUNSEARCHClient interface {
	// propose generates new candidate hypothesises based on parent candidates.
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error)
	// observe evaluates a given candidate hypothesis and returns its performance quantitative.
	Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (*ObserveResponse, error)
}

type fUNSEARCHClient struct {
	cc grpc.ClientConnInterface
}

func NewFUNSEARCHClient(cc grpc.ClientConnInterface) FUNSEARCHClient {
	return &fUNSEARCHClient{cc}
}

func (c *fUNSEARCHClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, FUNSEARCH_Propose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fUNSEARCHClient) Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (*ObserveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObserveResponse)
	err := c.cc.Invoke(ctx, FUNSEARCH_Observe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FUNSEARCHServer is the server API for FUNSEARCH service.
// All implementations must embed UnimplementedFUNSEARCHServer
// for forward compatibility.
//
// funsearch-worker service definition.
type FUNSEARCHServer interface {
	// propose generates new candidate hypothesises based on parent candidates.
	Propose(context.Context, *ProposeRequest) (*ProposeResponse, error)
	// observe evaluates a given candidate hypothesis and returns its performance quantitative.
	Observe(context.Context, *ObserveRequest) (*ObserveResponse, error)
	mustEmbedUnimplementedFUNSEARCHServer()
}

// UnimplementedFUNSEARCHServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFUNSEARCHServer struct{}

func (UnimplementedFUNSEARCHServer) Propose(context.Context, *ProposeRequest) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedFUNSEARCHServer) Observe(context.Context, *ObserveRequest) (*ObserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observe not implemented")
}
func (UnimplementedFUNSEARCHServer) mustEmbedUnimplementedFUNSEARCHServer() {}
func (UnimplementedFUNSEARCHServer) testEmbeddedByValue()                   {}

// UnsafeFUNSEARCHServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FUNSEARCHServer will
// result in compilation errors.
type UnsafeFUNSEARCHServer interface {
	mustEmbedUnimplementedFUNSEARCHServer()
}

func RegisterFUNSEARCHServer(s grpc.ServiceRegistrar, srv FUNSEARCHServer) {
	// If the following call pancis, it indicates UnimplementedFUNSEARCHServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FUNSEARCH_ServiceDesc, srv)
}

func _FUNSEARCH_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUNSEARCHServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUNSEARCH_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUNSEARCHServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FUNSEARCH_Observe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUNSEARCHServer).Observe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUNSEARCH_Observe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUNSEARCHServer).Observe(ctx, req.(*ObserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FUNSEARCH_ServiceDesc is the grpc.ServiceDesc for FUNSEARCH service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FUNSEARCH_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funsearch_worker.pb.FUNSEARCH",
	HandlerType: (*FUNSEARCHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "propose",
			Handler:    _FUNSEARCH_Propose_Handler,
		},
		{
			MethodName: "observe",
			Handler:    _FUNSEARCH_Observe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/funsearch.proto",
}
