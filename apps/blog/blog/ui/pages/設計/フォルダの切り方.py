import streamlit as st

"""
# フォルダの切り方

### **手順**

#### **ステップ 1: ドメインツリーの構築**
- **目的**: サービスの完成をルートノードとし、ドメインやサブドメインを定義する。
- **手順**: 再帰的な補題分轄を行いドメインツリーを構築、各ドメインやサブドメインをディレクトリ構成に反映する。
    - サービスの完成をルートノードとして捉える
    - ルートノードの実現に必要な主要な機能を大きなサブドメインとして定義する
    - 再帰的にサブドメインへの分轄を行う
    
#### **ステップ 2: 2つのルールの適用**

以下の2つのルールを各サブドメインで適用する

- **ルール 1: 共通化されたモジュールの定義**
  - **条件**: 複数のドメインで共通して利用される機能やリソースが存在する。
  - **処理**: その機能やリソースを表す概念をフォルダとして定義し、共通化されたモジュールとする。
- **ルール 2: 専門家による実装のまとめ**
  - **条件**: 同じ技術や専門知識を必要とする実装が複数のドメインで存在する。
  - **処理**: その実装を専門家が管理する具体的な名前のフォルダにまとめる。
  
#### **ステップ 3: 横断的な関心事のフォルダを作る**

entrypoint, kernel, gateway等

---

### **具体例: オンラインショッピングサービスのフォルダ構成**

#### **ステップ 1: ドメインツリーの構築**
- **ルートノード**: オンラインショッピングサービスの完成。
- **補題**: ユーザー管理、商品管理、注文処理、支払い処理、認証

```
online_shopping/
  ├── auth/
  ├── user_management/
  ├── product_management/
  ├── order_processing/
  └── payment_processing/
```

---

#### **ステップ 2: 2つのルールの適用**

##### **ルール 1: 共通化されたモジュールの定義**
- **条件**: ログ機能がすべてのドメインで必要。
- **処理**: ログ機能を `logging/` フォルダにまとめる。

```
online_shopping/
  ├── auth/
  ├── user_management/
  ├── product_management/
  ├── order_processing/
  ├── payment_processing/
  └── logging/
```

##### **ルール 2: 専門家による実装のまとめ**
- **条件**: データベースを使った実装がユーザー管理、商品管理、注文処理で必要。
- **処理**: データベースを使った実装を `database/` フォルダにまとめる。

```
online_shopping/
  ├── auth/
  ├── user_management/
  ├── product_management/
  ├── order_processing/
  ├── payment_processing/
  ├── logging/
  └── database/
```

#### **ステップ 3: 横断的な関心事のフォルダを作る**

entrypoint、api、gatewayなどのフォルダが生える

---

### **まとめ**
1. **ステップ 1**: ドメインツリーを構築し、各ドメインやサブドメインを反映する。
2. **ステップ 2**: 2つのルール（共通化されたモジュールの定義と専門家による実装のまとめ）を適用し、必要に応じてフォルダを追加する。
"""
